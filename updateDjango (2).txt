Step 1: Set Up Your Django Project
Make sure you have Django installed. If not, you can install it using pip:

pip install django

Create a new Django project:
django-admin startproject myproject

Navigate into your project directory:
cd myproject

Step 2: Create a Django App
In Django, functionality is organized into apps. Create a new app within your project:

python manage.py startapp myapp

Step 3.1: Define Models
Open myapp/models.py and define your data models. 
For example, let's create a simple model for storing information about books:

# myapp/models.py

from django.db import models

class Book(models.Model):
    title = models.CharField(max_length=200)
    author = models.CharField(max_length=100)
    publication_date = models.DateField()

    def __str__(self):
        return self.title

Step 3.2: Register Models to Admin
Open myapp/admin.py and register your data models. 

# myapp/sdmin.py
from django.contrib import admin
from . models import Book
admin.site.register(Book)

Step 4.1: Set Up SQLite3 Database
By default, Django uses SQLite3 as its database. Ensure your database is set up correctly in settings.py:
# myproject/settings.py

# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
Step 4.2: Register youy app to your project.
# myproject/settings.py

INSTALLED_APPS = [
    'myapp',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Step 5.1: Create Database Tables
Run migrations to create database tables for your models:


python manage.py makemigrations myapp
python manage.py migrate

Step 5.2: Create SuperUser

python manage.py createsuperuser

Step 6: Create Views for Data Editing
Define views in myapp/views.py for handling data editing operations. Here's an example of a view for displaying and editing books:
# myapp/views.py

from django.shortcuts import render, get_object_or_404, redirect
from .models import Book
from .forms import BookForm

def edit_book(request, book_id):
    book = get_object_or_404(Book, pk=book_id)
    if request.method == 'POST':
        form = BookForm(request.POST, instance=book)
        if form.is_valid():
            form.save()
            return redirect('book_detail', book_id=book_id)
    else:
        form = BookForm(instance=book)
    
    return render(request, 'edit_book.html', {'form': form})

def book_detail(request, book_id):
    book = get_object_or_404(Book, pk=book_id)
    return render(request, 'book_detail.html', {'book': book})

Step 7: Create Forms
Create a form class in myapp/forms.py to handle input validation and rendering:
# myapp/forms.py

from django import forms
from .models import Book

class BookForm(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['title', 'author', 'publication_date']

Step 8: Create Templates
Create HTML templates for displaying and editing books. For example:
(You have to create folder 'templates' if it does not exists in your app
myapp/templates/edit_book.html:

<!-- edit_book.html -->

<h2>Edit Book</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save Changes</button>
</form>

myapp/templates/book_detail.html:
<!-- book_detail.html -->

<h2>{{ book.title }}</h2>
<p>Author: {{ book.author }}</p>
<p>Publication Date: {{ book.publication_date }}</p>
<a href="{% url 'edit_book' book.id %}">Edit</a>

Step 9: Define URLs
Map URLs to views in myapp/urls.py:
(You need to create urls.py in your app )
# myapp/urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('edit/<int:book_id>/', views.edit_book, name='edit_book'),
    path('book/<int:book_id>/', views.book_detail, name='book_detail'),
    # other paths as needed
]

Include these URLs in your project's urls.py:
# myproject/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]



Step 10: Run Your Django Development Server
Finally, start the Django development server and navigate to http://localhost:8000/admin  in your web browser and enter data for Book through Admin Panel:

python manage.py runserver


Step 11: Create Views for viewing all records of Book.
Define views in myapp/views.py for handling data editing operations. 
# myapp/views.py
def book_all_details(request):
    ob=Book.objects.all().values()
    context={
        'data':ob
        }
    temp=loader.get_template('book_all_details.html')
    return HttpResponse(temp.render(context,request))

Step 12: Create Templates
Create HTML templates for displaying data with editing options. 
(You have to create folder 'templates' if it does not exists in your app
myapp/templates/book_detail.html:
<!-- book_detail.html -->
<h1>Welcome To All Books Data </h1>
<table border=1>
{% for i in data %}
<tr>
<td>{{i.id}}</td>
<td>{{i.title}}</td>
<td>{{i.author}}</td>
<td>{{i.publication_date}}</td>
<td>
<a href="{% url 'edit_book' i.id %}">
Edit
</a>
</td>
</tr>

{% endfor %}
</table>

Step 13: Define URLs
Map URLs to views in myapp/urls.py:
(You need to create urls.py in your app )
# myapp/urls.py
# myapp/urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('edit/<int:book_id>/', views.edit_book, name='edit_book'),
    path('book/<int:book_id>/', views.book_detail, name='book_detail'),
    path('book_all_details/',views.book_all_details,
         name='book_all_details'),
    # other paths as needed
]

Step 14: Run Your Django Development Server
Finally, start the Django development server and navigate to http://localhost:8000/book_all_details/  
in your web browser and edit data for Book 


python manage.py runserver

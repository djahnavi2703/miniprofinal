Step 1: Set Up Your Django Project
Make sure you have Django installed. If not, you can install it using pip:

pip install django

Create a new Django project:
django-admin startproject myproject

Navigate into your project directory:
cd myproject

Step 2: Create a Django App
In Django, functionality is organized into apps. Create a new app within your project:

python manage.py startapp myapp

Step 3: Define Models
Open myapp/models.py and define your data models. 
create two Django models where we'll use a foreign key relationship:
# myapp/models.py
from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()

    def __str__(self):
        return self.name

class Book(models.Model):
    title = models.CharField(max_length=200)
    author = models.ForeignKey(Author, on_delete=models.CASCADE)
    publish_date = models.DateField()

    def __str__(self):
        return self.title

Step 4: Register Models to Admin
Open myapp/admin.py and register your data models. 

# myapp/admin.py
from django.contrib import admin
from . models import Author,Book
admin.site.register(Book)
admin.site.register(Author)

Step 5: Set Up SQLite3 Database
By default, Django uses SQLite3 as its database. Ensure your database is set up correctly in settings.py:
# myproject/settings.py

# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
Step 6: Register youy app to your project.
# myproject/settings.py

INSTALLED_APPS = [
    'myapp',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Step 7: Migrate Your Database to create Database Tables
Run migrations to create database tables for your models:
This will create the necessary database tables (author and book ) and establish the foreign key relationship between them.

python manage.py makemigrations myapp
python manage.py migrate

Step 8: Create SuperUser

python manage.py createsuperuser

Step 9: Use Foreign Key in Views 
You can now use the foreign key relationships in your Django views  to query related objects:
Define views in myapp/views.py for handling data query operations. 
Here's an example of a view for querying from author and books:
# myapp/views.py

from django.shortcuts import render
from .models import Author, Book

def author_detail(request, author_id):
    ob_author = Author.objects.get(pk=author_id)
    ob_books = Book.objects.filter(author=ob_author)
    context={
        'author': ob_author, 
        'books': ob_books
    }
    return render(request, 'author_detail.html',context)
                  


Step 10: Use Foreign Key in Templates
You can now use the foreign key relationships in your Django  templates to query related objects:
Create HTML templates for displaying query results from author and books. 
(You have to create folder 'templates' if it does not exists in your app
myapp/templates/author_detail.html:
<!-- author_detail.html -->

<h1>{{ author.name }}</h1>
<p>Email: {{ author.email }}</p>

<h2>Books by {{ author.name }}</h2>
<ul>
  {% for book in books %}
    <li>{{ book.title }} - {{ book.publish_date }}</li>
  {% endfor %}
</ul>

Step 11: Define URLs
Map URLs to views in myapp/urls.py:
(You need to create urls.py in your app )
# myapp/urls.py

from django.urls import path
from . import views

urlpatterns = [
   path('view/<int:author_id>/',views.author_detail,name='author_detail'),
    # other paths as needed
]

Include these URLs in your project's urls.py:
# myproject/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]



Step 12: Run Your Django Development Server
Finally, start the Django development server and navigate to http://localhost:8000/admin  in your web browser and enter data for Author Book through Admin Panel:

python manage.py runserver

Sample Data for Author 
Name		Email			#Autogenerated Id
Praveen		praveen.nsic@gmail.com   	#id=1
Chandrasekhar	chandrasekhar@gmail.com	#id=2
Murali Mohan	mm@gmail.com		#id=3
Ganesh		ganesh@gmail.com		#id=4

Sample Data for Books	
Title			Author		Publish Date
C for Beginners		Murali Mohan	2024-07-01
Network Professionals Guide	Murali Mohan	2011-01-01
Python for Starters		Praveen		2021-06-01
Django for Coders		Praveen		2024-10-06
DBMS Approach		Chandrasekhar	2024-05-09

Step 13: navigate to following urls  in your web browser and see query results
http://127.0.0.1:8000/view/1/
http://127.0.0.1:8000/view/2/
http://127.0.0.1:8000/view/3/
http://127.0.0.1:8000/view/4/